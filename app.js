class KisanVaaniApp {
  constructor() {
    this.recognition = null;
    this.synthesis = window.speechSynthesis;
    this.currentLang = 'hi-IN'; // Changed default to Hindi
    this.translations = {
      'hi-IN': {
        greeting: ['‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞, ‡§ï‡•ã‡§ö‡§ø ‡§ï‡§ø‡§∏‡§æ‡§®!', '‡§π‡•à‡§≤‡•ã, ‡§µ‡§æ‡§Ø‡§®‡§æ‡§° ‡§ï‡§ø‡§∏‡§æ‡§®!'],
        dailyTip: ['‡§Æ‡§æ‡§®‡§∏‡•Ç‡§® ‡§Æ‡•á‡§Ç ‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤ ‡§¨‡§° ‡§∞‡•â‡§ü ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§', '‡§ß‡§æ‡§® ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à: 5-7 ‡§¶‡§ø‡§®‡•§'],
        title: 'üåø ‡§ï‡§ø‡§∏‡§æ‡§®‡§µ‡§æ‡§£‡•Ä',
        subtitle: '‡§ï‡•á‡§∞‡§≤ ‡§ï‡•á ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è AI ‡§∏‡§π‡§æ‡§Ø‡§ï',
        adviceTitle: 'üåü ‡§Ü‡§ú ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π',
        adviceText: '‡§Æ‡§æ‡§®‡§∏‡•Ç‡§® ‡§Æ‡•á‡§Ç ‡§ß‡§æ‡§® ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à 5-7 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¨‡§æ‡§∞‡•§',
        voicePrompt: 'üé§ ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§™‡•Ç‡§õ‡•á‡§Ç - ‡§Ü‡§µ‡§æ‡§ú ‡§Æ‡•á‡§Ç! ‡§´‡§∏‡§≤, ‡§Æ‡•å‡§∏‡§Æ, ‡§ï‡•Ä‡§Æ‡§§, ‡§Ø‡•ã‡§ú‡§®‡§æ - ‡§¨‡•ã‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§',
        sendBtn: '‡§≠‡•á‡§ú‡•á‡§Ç',
        responseTitle: 'ü§ñ ‡§â‡§§‡•ç‡§§‡§∞:',
        homeNav: 'üè† ‡§π‡•ã‡§Æ',
        weatherNav: '‚òÄÔ∏è ‡§Æ‡•å‡§∏‡§Æ',
        marketNav: 'üõí ‡§¨‡§æ‡§ú‡§æ‡§∞',
        schemesNav: 'üèõÔ∏è ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
        cropNav: 'üì∏ ‡§´‡§∏‡§≤ ‡§´‡•ã‡§ü‡•ã', // New
        weatherTitle: '‚òÄÔ∏è IMD ‡§Æ‡•å‡§∏‡§Æ (‡§ï‡•ã‡§ö‡§ø)',
        weatherBtn: '‡§¶‡•á‡§ñ‡•á‡§Ç',
        marketTitle: 'üõí ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç (‡§ï‡•á‡§∞‡§≤)',
        cropBtn: '‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§ü‡§Æ‡§æ‡§ü‡§∞\n‡§™‡•ç‡§Ø‡§æ‡§ú\n‡§Ö‡§®‡§æ‡§®‡§æ‡§∏', // Simplified
        searchBtn: '‡§ñ‡•ã‡§ú‡•á‡§Ç',
        schemesTitle: 'üèõÔ∏è ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
        errorMic: '‡§Ü‡§µ‡§æ‡§ú ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§®‡§π‡•Ä‡§Ç‡•§',
        errorVoice: '‡§Ü‡§µ‡§æ‡§ú ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§'
      },
      'ml-IN': {
        // Existing Malayalam translations (fallback)
        greeting: ['‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç, ‡¥ï‡µä‡¥ö‡µç‡¥ö‡¥ø ‡¥ï‡µº‡¥∑‡¥ï‡µá!', '‡¥π‡¥≤‡µã, ‡¥µ‡¥Ø‡¥®‡¥æ‡¥ü‡µç ‡¥ï‡µº‡¥∑‡¥ï‡¥æ!'],
        dailyTip: ['‡¥Æ‡¥¥‡¥ï‡µç‡¥ï‡¥æ‡¥≤‡¥§‡µç‡¥§‡µç ‡¥®‡¥æ‡¥≥‡¥ø‡¥ï‡µá‡¥∞‡¥Ç ‡¥¨‡¥°‡µç ‡¥±‡µã‡¥ü‡µç‡¥ü‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.', 'Paddy irrigation: 5-7 days.'],
        title: 'üåø KisanVaani',
        subtitle: '‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! ‡¥á‡¥®‡µç‡¥®‡¥§‡µç‡¥§‡µÜ ‡¥ü‡¥ø‡¥™‡µç‡¥™‡µç: ‡¥®‡¥æ‡¥≥‡¥ø‡¥ï‡µá‡¥∞‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥¨‡¥°‡µç ‡¥±‡µã‡¥ü‡µç‡¥ü‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
        // ... (add rest as needed)
      },
      'en-US': {
        // English fallback
        greeting: ['Hello, Kochi Farmer!', 'Hi, Wayanad Farmer!'],
        // ... (add rest)
      }
    };
    this.agriculturalData = { /* unchanged */ };
    this.schemes = [ /* unchanged */ ];
    this.initApp();
  }

  initApp() {
    setTimeout(() => {
      document.getElementById('splash').style.display = 'none';
      document.getElementById('appContent').style.display = 'block';
    }, 3000);

    this.updateUI(); // New: Apply translations on init
    const greetings = this.translations[this.currentLang].greeting || ['Default Greeting'];
    document.getElementById('greeting').textContent = greetings[Math.floor(Math.random() * greetings.length)];
    // Similar for tips...

    this.checkSystemRequirements();
    this.setupEventListeners();
    this.populateSchemes();
  }

  updateUI() {
    const t = this.translations[this.currentLang] || this.translations['en-US'];
    document.querySelector('.title').textContent = t.title;
    document.querySelector('.subtitle').textContent = t.subtitle;
    document.getElementById('adviceTitle').textContent = t.adviceTitle;
    document.getElementById('adviceText').textContent = t.adviceText;
    document.querySelector('.voice-prompt').textContent = t.voicePrompt;
    document.getElementById('sendBtn').textContent = t.sendBtn;
    // Add more selectors as needed (e.g., nav buttons, section titles)
    document.querySelectorAll('.nav-btn[data-i18n]').forEach(btn => {
      btn.textContent = t[btn.dataset.i18n];
    });
  }

  setupEventListeners() {
    // Existing...
    const langSelect = document.getElementById('langSelect');
    langSelect.addEventListener('change', (e) => {
      this.currentLang = e.target.value;
      this.updateUI(); // New: Refresh UI on lang change
      this.speakResponse({ solution: '‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•Ä ‡§ó‡§à‡•§' }); // Feedback
    });

    // New: Camera button listener
    const cropBtn = document.getElementById('cropBtn');
    cropBtn.addEventListener('click', () => this.startCamera());

    // Existing nav listeners, add new for crop:
    document.querySelectorAll('.nav-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        // Existing...
        if (e.target.dataset.section === 'crop') {
          document.getElementById('cropSection').classList.remove('hidden');
        }
      });
    });
  }

  async startVoiceInput() {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) return this.showError(this.translations[this.currentLang]?.errorMic || 'Voice support unavailable.');
    
    this.recognition = new SpeechRecognition();
    this.recognition.lang = this.currentLang;
    this.recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      document.getElementById('textInput').value = transcript; // Show in input
      this.processQuery(transcript);
    };
    this.recognition.onerror = () => this.showError(this.translations[this.currentLang]?.errorVoice || 'Voice error.');
    this.recognition.start();
    document.getElementById('micBtn').classList.add('listening');
    this.recognition.onend = () => document.getElementById('micBtn').classList.remove('listening');
  }

  async processQuery(query) {
    // Enhanced: Send to AI first, fallback to local
    try {
      const aiRes = await fetch(`/.netlify/functions/ai-query?query=${encodeURIComponent(query)}&lang=${this.currentLang}`);
      const response = await aiRes.json();
      this.showResponse(response);
      this.speakResponse(response);
    } catch (err) {
      // Fallback to local
      const localRes = this.getAIResponse(query.toLowerCase());
      this.showResponse(localRes);
      this.speakResponse(localRes);
    }
  }

  // New: Camera for Crop Photo
  async startCamera() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
      const video = document.getElementById('cropVideo'); // Add <video id="cropVideo"> in HTML
      const canvas = document.getElementById('cropCanvas'); // Add <canvas id="cropCanvas" style="display:none;"></canvas>
      video.srcObject = stream;
      video.play();

      // Capture button logic (add in HTML: <button id="captureBtn">Snap Photo</button>)
      document.getElementById('captureBtn').onclick = () => {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext('2d').drawImage(video, 0, 0);
        const imageData = canvas.toDataURL('image/jpeg');
        stream.getTracks().forEach(track => track.stop());
        video.style.display = 'none';

        // Send to AI for analysis
        this.analyzeCropPhoto(imageData);
      };
    } catch (err) {
      this.showError('‡§ï‡•à‡§Æ‡§∞‡§æ ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§');
    }
  }

  async analyzeCropPhoto(imageData) {
    try {
      const res = await fetch(`/.netlify/functions/crop-analyze`, {
        method: 'POST',
        body: JSON.stringify({ image: imageData, lang: this.currentLang })
      });
      const response = await res.json();
      this.showResponse(response);
      this.speakResponse(response);
      // Display photo
      document.getElementById('cropPhoto').src = imageData; // Add <img id="cropPhoto">
    } catch (err) {
      this.showError('‡§´‡§∏‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§µ‡§ø‡§´‡§≤‡•§ ‡§´‡•â‡§≤‡§¨‡•à‡§ï: ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§™‡•Ä‡§≤‡•Ä - ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä‡•§');
    }
  }

  // Rest unchanged...
}

document.addEventListener('DOMContentLoaded', () => new KisanVaaniApp());
