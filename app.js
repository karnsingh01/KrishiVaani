class KisanVaaniApp {
    constructor() {
        this.recognition = null;
        this.synthesis = window.speechSynthesis;
        this.currentLang = 'ml-IN';
        this.isListening = false;

        // Enhanced agricultural data with more problems and fertilizer recommendations
        this.agriculturalData = {
            cropProblems: {
                '‡¥á‡¥≤‡¥ï‡µæ ‡¥Æ‡¥û‡µç‡¥û': { 
                    diagnosis: '‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥ï‡µÅ‡¥±‡¥µ‡µç', 
                    solution: '‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø 25kg/‡¥è‡¥ï‡µç‡¥ï‡µº ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥Æ‡¥¥‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µÅ‡¥Æ‡µç‡¥™‡µç ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
                    fertilizers: ['‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø', '‡¥Ö‡¥Æ‡µã‡¥£‡¥ø‡¥Ø‡¥Ç ‡¥∏‡µæ‡¥´‡µá‡¥±‡µç‡¥±‡µç']
                },
                'yellow leaves': { 
                    diagnosis: 'Nitrogen deficiency', 
                    solution: 'Apply Urea 25kg/acre before rain. Also use organic compost.',
                    fertilizers: ['Urea', 'Ammonium Sulfate', 'Organic Compost']
                },
                '‡¥á‡¥≤‡¥ï‡µæ ‡¥µ‡¥æ‡¥ü‡¥ø': {
                    diagnosis: '‡¥ú‡¥≤ ‡¥ï‡µÅ‡¥±‡¥µ‡µç ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥µ‡µá‡¥∞‡µÅ‡¥ö‡µÄ‡¥Ø‡µΩ',
                    solution: '‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥Ç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥ï‡¥æ‡µº‡¥¨‡µÜ‡µª‡¥°‡¥æ‡¥∏‡¥ø‡¥Ç ‡¥∏‡µç‡¥™‡µç‡¥∞‡µá ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.',
                    fertilizers: ['‡¥ï‡¥æ‡µº‡¥¨‡µÜ‡µª‡¥°‡¥æ‡¥∏‡¥ø‡¥Ç', 'NPK 19:19:19']
                },
                'brown spots': {
                    diagnosis: 'Fungal infection',
                    solution: 'Use Carbendazim spray. Improve air circulation.',
                    fertilizers: ['Carbendazim', 'Copper Sulfate', 'Neem Oil']
                }
            }
        };

        this.schemes = [
            { name: "PM-KISAN", desc: "‚Çπ6000/‡¥µ‡µº‡¥∑‡¥Ç", link: "https://pmkisan.gov.in/" },
            { name: "Kudumbashree", desc: "‡¥ï‡µº‡¥∑‡¥ï ‡¥µ‡¥æ‡¥Ø‡µç‡¥™‡¥ï‡µæ", link: "https://www.kudumbashree.org/" },
            { name: "ATMA", desc: "‡¥ï‡¥æ‡µº‡¥∑‡¥ø‡¥ï ‡¥µ‡¥ø‡¥™‡µÅ‡¥≤‡µÄ‡¥ï‡¥∞‡¥£‡¥Ç", link: "#" }
        ];

        this.initApp();
    }

    initApp() {
        // Show splash screen for 3 seconds
        setTimeout(() => {
            document.getElementById('splash').style.display = 'none';
            document.getElementById('appContent').style.display = 'block';
        }, 3000);

        // Set random greeting
        const greetings = ['‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç ‡¥ï‡µº‡¥∑‡¥ï ‡¥∏‡µÅ‡¥π‡µÉ‡¥§‡µç‡¥§‡µá!', '‡¥π‡¥≤‡µã ‡¥ï‡µä‡¥ö‡µç‡¥ö‡¥ø ‡¥ï‡µº‡¥∑‡¥ï‡µá!', '‡¥µ‡¥Ø‡¥®‡¥æ‡¥ü‡µç ‡¥ï‡µº‡¥∑‡¥ï‡¥æ, ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç!'];
        document.getElementById('greeting').textContent = greetings[Math.floor(Math.random() * greetings.length)];

        // Set random daily tip
        const tips = [
            '‡¥Æ‡¥¥‡¥ï‡µç‡¥ï‡¥æ‡¥≤‡¥§‡µç‡¥§‡µç ‡¥®‡¥æ‡¥≥‡¥ø‡¥ï‡µá‡¥∞‡¥Ç ‡¥¨‡¥°‡µç ‡¥±‡µã‡¥ü‡µç‡¥ü‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
            '‡¥®‡µÜ‡¥≤‡µç‡¥≤‡µç ‡¥ú‡¥≤‡¥∏‡µá‡¥ö‡¥®‡¥Ç 5-7 ‡¥¶‡¥ø‡¥µ‡¥∏‡¥§‡µç‡¥§‡¥ø‡¥≤‡µä‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µΩ.',
            '‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ pH 6.5-7.5 ‡¥µ‡¥∞‡µÜ ‡¥®‡¥ø‡¥≤‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥ï.',
            'Use organic fertilizers for better soil health.'
        ];
        document.getElementById('dailyTip').textContent = tips[Math.floor(Math.random() * tips.length)];

        this.checkSystemRequirements();
        this.setupEventListeners();
        this.populateSchemes();
    }

    checkSystemRequirements() {
        // Check if speech recognition is supported
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const micBtn = document.getElementById('micBtn');
        const status = document.getElementById('status');

        if (SpeechRecognition) {
            micBtn.disabled = false;
            status.textContent = '‡¥Æ‡µà‡¥ï‡µç‡¥∞‡µã‡¥´‡µã‡µ∫ ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡µº!';
            status.style.color = 'green';
        } else {
            status.textContent = '‡¥∂‡¥¨‡µç‡¥¶ ‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£ ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤.';
            status.style.color = 'red';
        }

        // Check HTTPS
        if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
            status.textContent = 'HTTPS ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Æ‡¥æ‡¥£‡µç ‡¥Æ‡µà‡¥ï‡µç‡¥∞‡µã‡¥´‡µã‡µ∫ ‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥®‡¥§‡µç‡¥§‡¥ø‡¥®‡µç.';
            status.style.color = 'orange';
        }
    }

    setupEventListeners() {
        const micBtn = document.getElementById('micBtn');
        const sendBtn = document.getElementById('sendBtn');
        const textInput = document.getElementById('textInput');
        const langSelect = document.getElementById('langSelect');
        const weatherBtn = document.getElementById('weatherBtn');
        const mandiBtn = document.getElementById('mandiBtn');
        const photoInput = document.getElementById('photoInput');
        const photoSubmitBtn = document.getElementById('photoSubmitBtn');

        // Voice input
        micBtn.addEventListener('click', () => this.startVoiceInput());

        // Text input
        sendBtn.addEventListener('click', () => this.processTextInput());
        textInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.processTextInput();
        });

        // Language selection
        langSelect.addEventListener('change', (e) => {
            this.currentLang = e.target.value;
        });

        // Weather and Mandi
        weatherBtn.addEventListener('click', () => this.fetchWeather(document.getElementById('cityInput').value || 'Kochi'));
        mandiBtn.addEventListener('click', () => this.fetchMandiPrices(document.getElementById('mandiSearch').value || 'Tomato'));

        // Photo upload functionality
        photoInput.addEventListener('change', (e) => {
            if (e.target.files[0]) {
                this.previewImage(e.target.files[0]);
            }
        });

        photoSubmitBtn.addEventListener('click', () => this.analyzePhoto());

        // Bottom navigation
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelector('.nav-btn.active')?.classList.remove('active');
                e.target.classList.add('active');

                // Hide all sections
                document.querySelectorAll('.section-card, .voice-card').forEach(sec => sec.classList.add('hidden'));

                // Show selected section
                const section = e.target.dataset.section;
                if (section === 'voice') {
                    document.getElementById('voice-card').classList.remove('hidden');
                } else {
                    document.getElementById(section + 'Section').classList.remove('hidden');
                }
            });
        });
    }

    async startVoiceInput() {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const micBtn = document.getElementById('micBtn');
        const status = document.getElementById('status');

        if (!SpeechRecognition) {
            this.showError('‡¥∂‡¥¨‡µç‡¥¶ ‡¥™‡¥ø‡¥®‡µç‡¥§‡µÅ‡¥£ ‡¥à ‡¥¨‡µç‡¥∞‡µó‡¥∏‡¥±‡¥ø‡µΩ ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤.');
            return;
        }

        if (this.isListening) {
            this.stopListening();
            return;
        }

        try {
            this.recognition = new SpeechRecognition();
            this.recognition.lang = this.currentLang;
            this.recognition.continuous = false;
            this.recognition.interimResults = false;

            this.recognition.onstart = () => {
                this.isListening = true;
                micBtn.classList.add('listening');
                micBtn.textContent = 'üõë';
                status.textContent = '‡¥ï‡µá‡µæ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ... ‡¥∏‡¥Ç‡¥∏‡¥æ‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï!';
                status.style.color = 'blue';
            };

            this.recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                document.getElementById('textInput').value = transcript;
                status.textContent = `‡¥ï‡µá‡¥ü‡µç‡¥ü‡µÅ: "${transcript}"`;
                this.processQuery(transcript);
                this.stopListening();
            };

            this.recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                let errorMessage = '‡¥∂‡¥¨‡µç‡¥¶ ‡¥™‡¥ø‡¥∂‡¥ï‡µç: ';

                switch(event.error) {
                    case 'not-allowed':
                        errorMessage += '‡¥Æ‡µà‡¥ï‡µç‡¥∞‡µã‡¥´‡µã‡µ∫ ‡¥Ö‡¥®‡µÅ‡¥Æ‡¥§‡¥ø ‡¥®‡¥ø‡¥∑‡µá‡¥ß‡¥ø‡¥ö‡µç‡¥ö‡µÅ. ‡¥Ö‡¥®‡µÅ‡¥Æ‡¥§‡¥ø ‡¥®‡µΩ‡¥ï‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.';
                        break;
                    case 'no-speech':
                        errorMessage += '‡¥∂‡¥¨‡µç‡¥¶‡¥Ç ‡¥ï‡µá‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤. ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.';
                        break;
                    case 'network':
                        errorMessage += '‡¥®‡µÜ‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥ø‡¥∂‡¥ï‡µç.';
                        break;
                    default:
                        errorMessage += event.error;
                }

                this.showError(errorMessage);
                this.stopListening();
            };

            this.recognition.onend = () => {
                this.stopListening();
            };

            this.recognition.start();

        } catch (error) {
            console.error('Error starting speech recognition:', error);
            this.showError('‡¥Æ‡µà‡¥ï‡µç‡¥∞‡µã‡¥´‡µã‡µ∫ ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥ø‡¥≤‡µç‡¥≤.');
        }
    }

    stopListening() {
        if (this.recognition) {
            this.recognition.stop();
        }

        const micBtn = document.getElementById('micBtn');
        const status = document.getElementById('status');

        this.isListening = false;
        micBtn.classList.remove('listening');
        micBtn.textContent = 'üé§';
        status.textContent = '‡¥Æ‡µà‡¥ï‡µç‡¥∞‡µã‡¥´‡µã‡µ∫ ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡µº!';
        status.style.color = 'green';
    }

    processTextInput() {
        const textInput = document.getElementById('textInput');
        const query = textInput.value.trim();

        if (query) {
            this.processQuery(query);
            textInput.value = '';
        }
    }

    async processQuery(query) {
        const lowerQuery = query.toLowerCase();
        let response;

        // Show loading
        this.showLoading();

        if (lowerQuery.includes('‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•') || lowerQuery.includes('weather')) {
            response = await this.fetchWeather('Kochi');
        } else if (lowerQuery.includes('‡¥µ‡¥ø‡¥≤') || lowerQuery.includes('price') || lowerQuery.includes('‡¥Æ‡¥æ‡µº‡¥ï‡µç‡¥ï‡¥±‡µç‡¥±‡µç')) {
            response = await this.fetchMandiPrices('Tomato');
        } else {
            response = this.getAIResponse(lowerQuery);
        }

        this.showResponse(response);
        this.speakResponse(response);
    }

    previewImage(file) {
        const preview = document.getElementById('photoPreview');
        const reader = new FileReader();

        reader.onload = function(e) {
            preview.innerHTML = `<img src="${e.target.result}" alt="Crop preview" style="max-width: 100%; height: auto; border-radius: 8px; margin-top: 10px;">`;
        };

        reader.readAsDataURL(file);
        document.getElementById('photoStatus').textContent = '‡¥´‡µã‡¥ü‡µç‡¥ü‡µã ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥Ø‡¥ø!';
    }

    async analyzePhoto() {
        const photoInput = document.getElementById('photoInput');
        const photoStatus = document.getElementById('photoStatus');

        if (!photoInput.files[0]) {
            photoStatus.textContent = '‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥í‡¥∞‡µÅ ‡¥´‡µã‡¥ü‡µç‡¥ü‡µã ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.';
            photoStatus.style.color = 'red';
            return;
        }

        photoStatus.textContent = '‡¥´‡µã‡¥ü‡µç‡¥ü‡µã ‡¥µ‡¥ø‡¥∂‡¥ï‡¥≤‡¥®‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ...';
        photoStatus.style.color = 'blue';

        // Simulate AI analysis (replace with actual AI service)
        setTimeout(() => {
            // Random diagnosis for demo
            const problems = [
                {
                    diagnosis: '‡¥á‡¥≤‡¥ï‡¥≥‡¥ø‡µΩ ‡¥Æ‡¥û‡µç‡¥û‡¥®‡¥ø‡¥±‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥ø - ‡¥®‡µà‡¥ü‡µç‡¥∞‡¥ú‡µª ‡¥ï‡µÅ‡¥±‡¥µ‡µç',
                    solution: '‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø 25kg/‡¥è‡¥ï‡µç‡¥ï‡µº ‡¥é‡¥®‡µç‡¥® ‡¥§‡µã‡¥§‡¥ø‡µΩ ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥Æ‡¥¥‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡µÅ‡¥Æ‡µç‡¥™‡µç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï.',
                    fertilizers: ['‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø', '‡¥Ö‡¥Æ‡µã‡¥£‡¥ø‡¥Ø‡¥Ç ‡¥∏‡µæ‡¥´‡µá‡¥±‡µç‡¥±‡µç', '‡¥ú‡µà‡¥µ ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç']
                },
                {
                    diagnosis: '‡¥á‡¥≤‡¥ï‡¥≥‡¥ø‡µΩ ‡¥§‡¥µ‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥®‡¥ø‡¥± ‡¥™‡¥æ‡¥ü‡µÅ‡¥ï‡µæ - ‡¥´‡¥Ç‡¥ó‡µΩ ‡¥Ö‡¥£‡µÅ‡¥¨‡¥æ‡¥ß',
                    solution: '‡¥ï‡¥æ‡µº‡¥¨‡µÜ‡µª‡¥°‡¥æ‡¥∏‡¥ø‡¥Ç ‡¥∏‡µç‡¥™‡µç‡¥∞‡µá ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï. ‡¥µ‡¥æ‡¥Ø‡µÅ ‡¥∏‡¥û‡µç‡¥ö‡¥æ‡¥∞‡¥Ç ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï.',
                    fertilizers: ['‡¥ï‡¥æ‡µº‡¥¨‡µÜ‡µª‡¥°‡¥æ‡¥∏‡¥ø‡¥Ç', '‡¥ï‡µã‡¥™‡µç‡¥™‡µº ‡¥∏‡µæ‡¥´‡µá‡¥±‡µç‡¥±‡µç', '‡¥µ‡µá‡¥™‡µç‡¥™‡µÜ‡¥£‡µç‡¥£']
                },
                {
                    diagnosis: '‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø ‡¥∏‡¥∏‡µç‡¥Ø‡¥Ç - ‡¥™‡µç‡¥∞‡¥§‡¥ø‡¥∞‡µã‡¥ß ‡¥™‡¥∞‡¥ø‡¥ö‡¥∞‡¥£‡¥Ç ‡¥Ü‡¥µ‡¥∂‡µç‡¥Ø‡¥Ç',
                    solution: 'NPK 19:19:19 ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥ú‡µà‡¥µ ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
                    fertilizers: ['NPK 19:19:19', '‡¥ú‡µà‡¥µ ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç', '‡¥µ‡µá‡¥™‡µç‡¥™‡µç ‡¥ï‡µá‡¥ï‡µç‡¥ï‡µç']
                }
            ];

            const randomProblem = problems[Math.floor(Math.random() * problems.length)];

            const response = {
                diagnosis: randomProblem.diagnosis,
                solution: `${randomProblem.solution}\n\n‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥∞‡¥æ‡¥∏‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ: ${randomProblem.fertilizers.join(', ')}`,
                fertilizers: randomProblem.fertilizers
            };

            this.showResponse(response);
            this.speakResponse(response);

            photoStatus.textContent = '‡¥µ‡¥ø‡¥∂‡¥ï‡¥≤‡¥®‡¥Ç ‡¥™‡µÇ‡µº‡¥§‡µç‡¥§‡µÄ‡¥ï‡¥∞‡¥ø‡¥ö‡µç‡¥ö‡µÅ!';
            photoStatus.style.color = 'green';
        }, 2000);
    }

    async fetchWeather(city) {
        try {
            // Mock weather data for demo
            const weatherData = {
                solution: `${city} ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•: 28¬∞C, ‡¥Æ‡¥¥ ‡¥∏‡¥æ‡¥ß‡µç‡¥Ø‡¥§ 70%. ‡¥ï‡¥æ‡µº‡¥∑‡¥ø‡¥ï ‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥®‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥®‡µÅ‡¥ï‡µÇ‡¥≤‡¥Ç.`
            };
            return weatherData;
        } catch (err) {
            return { 
                solution: '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤. ‡¥™‡µä‡¥§‡µÅ‡¥µ‡µá 25-30¬∞C, ‡¥Æ‡¥¥ ‡¥∏‡¥æ‡¥ß‡µç‡¥Ø‡¥§.'
            };
        }
    }

    async fetchMandiPrices(commodity) {
        try {
            // Mock mandi prices for demo
            const prices = {
                'Tomato': '‚Çπ30/kg',
                'Onion': '‚Çπ25/kg', 
                'Rice': '‚Çπ45/kg',
                'Coconut': '‚Çπ35/piece'
            };

            return {
                solution: `${commodity} ‡¥µ‡¥ø‡¥≤: ${prices[commodity] || '‚Çπ25/kg'} (‡¥™‡¥æ‡¥≤‡¥ï‡µç‡¥ï‡¥æ‡¥ü‡µç ‡¥Æ‡¥£‡µç‡¥ü‡¥ø). ‡¥µ‡¥ø‡µΩ‡¥™‡µç‡¥™‡¥®‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥®‡µÅ‡¥ï‡µÇ‡¥≤ ‡¥∏‡¥Æ‡¥Ø‡¥Ç.`
            };
        } catch (err) {
            return { 
                solution: '‡¥Æ‡¥æ‡µº‡¥ï‡µç‡¥ï‡¥±‡µç‡¥±‡µç ‡¥µ‡¥ø‡¥≤‡¥ï‡µæ ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤. ‡¥∂‡¥∞‡¥æ‡¥∂‡¥∞‡¥ø ‡¥µ‡¥ø‡¥≤: ‚Çπ25-30/kg.'
            };
        }
    }

    getAIResponse(query) {
        // Enhanced AI response with fertilizer recommendations
        const lowerQuery = query.toLowerCase();

        for (const [key, data] of Object.entries(this.agriculturalData.cropProblems)) {
            if (lowerQuery.includes(key.toLowerCase()) || 
                lowerQuery.includes(data.diagnosis.toLowerCase())) {
                return {
                    diagnosis: data.diagnosis,
                    solution: `${data.solution}\n\n‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥∞‡¥æ‡¥∏‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ: ${data.fertilizers.join(', ')}`,
                    fertilizers: data.fertilizers
                };
            }
        }

        // Default response with general advice
        return { 
            diagnosis: '‡¥™‡µä‡¥§‡µÅ ‡¥â‡¥™‡¥¶‡µá‡¥∂‡¥Ç', 
            solution: '‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥® ‡¥®‡¥ü‡¥§‡µç‡¥§‡µÅ‡¥ï. pH 6.5-7.5 ‡¥®‡¥ø‡¥≤‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥ï. ‡¥ú‡µà‡¥µ ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.\n\n‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥∞‡¥æ‡¥∏‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ: NPK 19:19:19, ‡¥ú‡µà‡¥µ ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç',
            fertilizers: ['NPK 19:19:19', '‡¥ú‡µà‡¥µ ‡¥ï‡¥Æ‡µç‡¥™‡µã‡¥∏‡µç‡¥±‡µç‡¥±‡µç', '‡¥µ‡µá‡¥™‡µç‡¥™‡µç ‡¥ï‡µá‡¥ï‡µç‡¥ï‡µç']
        };
    }

    speakResponse(response) {
        if (this.synthesis && response.solution) {
            // Stop any ongoing speech
            this.synthesis.cancel();

            const text = response.solution.replace(/\n/g, ' ');
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = this.currentLang;
            utterance.rate = 0.8;
            utterance.volume = 1;

            this.synthesis.speak(utterance);
        }
    }

    showResponse(response) {
        const responseSection = document.getElementById('responseSection');
        const responseContent = document.getElementById('responseContent');

        let html = '';

        if (response.diagnosis) {
            html += `<div class="diagnosis"><strong>üîç ‡¥∞‡µã‡¥ó‡¥®‡¥ø‡µº‡¥£‡µç‡¥£‡¥Ø‡¥Ç:</strong> ${response.diagnosis}</div>`;
        }

        if (response.solution) {
            html += `<div class="solution"><strong>üí° ‡¥™‡¥∞‡¥ø‡¥π‡¥æ‡¥∞‡¥Ç:</strong> ${response.solution.replace(/\n/g, '<br>')}</div>`;
        }

        if (response.fertilizers) {
            html += `<div class="fertilizers"><strong>üß™ ‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥∞‡¥æ‡¥∏‡¥µ‡¥≥‡¥ô‡µç‡¥ô‡µæ:</strong><ul>`;
            response.fertilizers.forEach(fertilizer => {
                html += `<li>${fertilizer}</li>`;
            });
            html += `</ul></div>`;
        }

        responseContent.innerHTML = html;
        responseSection.classList.remove('hidden');

        // Scroll to response
        responseSection.scrollIntoView({ behavior: 'smooth' });
    }

    showLoading() {
        const responseSection = document.getElementById('responseSection');
        const responseContent = document.getElementById('responseContent');

        responseContent.innerHTML = '<div class="loading">‚è≥ ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ...</div>';
        responseSection.classList.remove('hidden');
    }

    showError(message) {
        const status = document.getElementById('status');
        status.textContent = message;
        status.style.color = 'red';

        // Clear error after 5 seconds
        setTimeout(() => {
            status.textContent = '‡¥Æ‡µà‡¥ï‡µç‡¥∞‡µã‡¥´‡µã‡µ∫ ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡µº!';
            status.style.color = 'green';
        }, 5000);
    }

    populateSchemes() {
        const schemesList = document.getElementById('schemesList');

        this.schemes.forEach(scheme => {
            const div = document.createElement('div');
            div.className = 'scheme-item';
            div.innerHTML = `
                <h4>${scheme.name}</h4>
                <p>${scheme.desc}</p>
                <a href="${scheme.link}" target="_blank">‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥Ö‡¥±‡¥ø‡¥Ø‡µÅ‡¥ï</a>
            `;
            schemesList.appendChild(div);
        });
    }
}

// Initialize the app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new KisanVaaniApp();
});
